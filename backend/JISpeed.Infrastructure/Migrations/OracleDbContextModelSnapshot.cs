// <auto-generated />
using System;
using JISpeed.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;

#nullable disable

namespace JISpeed.Infrastructure.Migrations
{
    [DbContext(typeof(OracleDbContext))]
    partial class OracleDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            OracleModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JISpeed.Core.Entities.Admin.Admin", b =>
                {
                    b.Property<string>("AdminId")
                        .HasMaxLength(450)
                        .HasColumnType("VARCHAR2(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("PermissionLevel")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("NVARCHAR2(32)");

                    b.HasKey("AdminId");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique()
                        .HasFilter("\"ApplicationUserId\" IS NOT NULL");

                    b.ToTable("ADMIN", (string)null);
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Admin.Announcement", b =>
                {
                    b.Property<string>("AnnounceId")
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.Property<string>("AdminId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("VARCHAR(450)");

                    b.Property<string>("Content")
                        .HasMaxLength(65535)
                        .HasColumnType("NCLOB");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("TargetRole")
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)");

                    b.HasKey("AnnounceId");

                    b.HasIndex("AdminId");

                    b.ToTable("ANNOUNCEMENT", (string)null);
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Common.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("NVARCHAR2(450)")
                        .HasColumnName("ID");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("ACCESS_FAILED_COUNT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)")
                        .HasColumnName("CONCURRENCY_STAMP");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("CREATEDAT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)")
                        .HasColumnName("EMAIL");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("NUMBER(1,0)")
                        .HasColumnName("EMAIL_CONFIRMED");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("NUMBER(1,0)")
                        .HasColumnName("LOCKOUT_ENABLED");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("TIMESTAMP(7)")
                        .HasColumnName("LOCKOUT_END");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)")
                        .HasColumnName("NORMALIZED_EMAIL");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)")
                        .HasColumnName("NORMALIZED_USER_NAME");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)")
                        .HasColumnName("PASSWORD_HASH");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)")
                        .HasColumnName("PHONE_NUMBER");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("NUMBER(1,0)")
                        .HasColumnName("PHONE_NUMBER_CONFIRMED");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)")
                        .HasColumnName("SECURITY_STAMP");

                    b.Property<int>("Status")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("STATUS");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("NUMBER(1,0)")
                        .HasColumnName("TWO_FACTOR_ENABLED");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)")
                        .HasColumnName("USER_NAME");

                    b.Property<int>("UserType")
                        .HasColumnType("NUMBER(10)")
                        .HasColumnName("USERTYPE");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("\"NORMALIZED_USER_NAME\" IS NOT NULL");

                    b.ToTable("APP_USERS", (string)null);
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Common.Coupon", b =>
                {
                    b.Property<string>("CouponId")
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<decimal>("FaceValue")
                        .HasColumnType("DECIMAL(10, 2)");

                    b.Property<int>("IssuedQty")
                        .HasColumnType("NUMBER(10)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<decimal>("Threshold")
                        .HasColumnType("DECIMAL(10, 2)");

                    b.Property<int>("TotalQty")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("VARCHAR(450)");

                    b.HasKey("CouponId");

                    b.HasIndex("UserId");

                    b.ToTable("COUPON", (string)null);
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Dish.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)");

                    b.Property<string>("ParentId")
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("CategoryId");

                    b.HasIndex("ParentId");

                    b.ToTable("CATEGORY", (string)null);
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Dish.Dish", b =>
                {
                    b.Property<string>("DishId")
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.Property<string>("CoverUrl")
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR2(200)");

                    b.Property<string>("DishName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)");

                    b.Property<string>("MerchantId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("VARCHAR(450)");

                    b.Property<int>("MonthlySales")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("OnSale")
                        .HasColumnType("NUMBER(10)");

                    b.Property<decimal>("OriginPrice")
                        .HasColumnType("DECIMAL(10, 2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL(10, 2)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("DECIMAL(5, 2)");

                    b.Property<int>("ReviewQuantity")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("DishId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("MerchantId");

                    b.ToTable("DISH", (string)null);
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Junctions.DishReview", b =>
                {
                    b.Property<string>("DishId")
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.Property<string>("ReviewId")
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.HasKey("DishId", "ReviewId");

                    b.HasIndex("ReviewId");

                    b.ToTable("DISH_REVIEW", (string)null);
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Junctions.OrderDish", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.Property<string>("DishId")
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.HasKey("OrderId", "DishId");

                    b.HasIndex("DishId");

                    b.ToTable("ORDER_DISH", (string)null);
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Merchant.Application", b =>
                {
                    b.Property<string>("ApplyId")
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.Property<string>("AdminId")
                        .HasMaxLength(450)
                        .HasColumnType("VARCHAR(450)");

                    b.Property<DateTime?>("AuditAt")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<int>("AuditStatus")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)");

                    b.Property<string>("MerchantId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("VARCHAR(450)");

                    b.Property<string>("RejectReason")
                        .HasMaxLength(65535)
                        .HasColumnType("NCLOB");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("TIMESTAMP(7)");

                    b.HasKey("ApplyId");

                    b.HasIndex("AdminId");

                    b.HasIndex("MerchantId");

                    b.ToTable("APPLICATION", (string)null);
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Merchant.Merchant", b =>
                {
                    b.Property<string>("MerchantId")
                        .HasMaxLength(450)
                        .HasColumnType("VARCHAR2(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("ContactInfo")
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR2(200)");

                    b.Property<string>("MerchantName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)");

                    b.Property<int>("Status")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("MerchantId");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique()
                        .HasFilter("\"ApplicationUserId\" IS NOT NULL");

                    b.ToTable("MERCHANT", (string)null);
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Merchant.SalesStat", b =>
                {
                    b.Property<DateTime>("StatDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("MerchantId")
                        .HasMaxLength(450)
                        .HasColumnType("VARCHAR(450)");

                    b.Property<decimal>("SalesAmount")
                        .HasColumnType("DECIMAL(10, 2)");

                    b.Property<int>("SalesQty")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("StatDate", "MerchantId");

                    b.HasIndex("MerchantId");

                    b.ToTable("SALESSTAT", (string)null);
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Merchant.Settlement", b =>
                {
                    b.Property<string>("SettleId")
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.Property<decimal>("CommissionFee")
                        .HasColumnType("DECIMAL(10, 2)");

                    b.Property<decimal>("GrossAmount")
                        .HasColumnType("DECIMAL(10, 2)");

                    b.Property<string>("MerchantId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("VARCHAR(450)");

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("DECIMAL(10, 2)");

                    b.Property<DateTime>("PeriodEnd")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<DateTime>("PeriodStart")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<DateTime?>("SettledAt")
                        .HasColumnType("TIMESTAMP(7)");

                    b.HasKey("SettleId");

                    b.HasIndex("MerchantId");

                    b.ToTable("SETTLEMENT", (string)null);
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Order.Complaint", b =>
                {
                    b.Property<string>("ComplaintId")
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.Property<string>("CmplDescription")
                        .HasMaxLength(65535)
                        .HasColumnType("NCLOB");

                    b.Property<int>("CmplRole")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("CmplStatus")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("ComplainantId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("VARCHAR(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.HasKey("ComplaintId");

                    b.HasIndex("ComplainantId");

                    b.HasIndex("OrderId");

                    b.ToTable("COMPLAINT", (string)null);
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Order.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.Property<string>("AddressId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.Property<string>("AssignId")
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.Property<string>("CouponId")
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<decimal>("OrderAmount")
                        .HasColumnType("DECIMAL(10, 2)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("ReconId")
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("VARCHAR(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("AddressId");

                    b.HasIndex("AssignId")
                        .IsUnique()
                        .HasFilter("\"AssignId\" IS NOT NULL");

                    b.HasIndex("CouponId");

                    b.HasIndex("ReconId");

                    b.HasIndex("UserId");

                    b.ToTable("ORDERS", (string)null);
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Order.OrderLog", b =>
                {
                    b.Property<string>("LogId")
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.Property<string>("OrderId")
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.Property<string>("Actor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)");

                    b.Property<DateTime>("LoggedAt")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("Remark")
                        .HasMaxLength(65535)
                        .HasColumnType("NCLOB");

                    b.Property<int>("StatusCode")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("LogId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("ORDERLOG", (string)null);
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Order.Payment", b =>
                {
                    b.Property<string>("PayId")
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.Property<decimal>("PayAmount")
                        .HasColumnType("DECIMAL(10, 2)");

                    b.Property<int>("PayStatus")
                        .HasColumnType("NUMBER(10)");

                    b.Property<DateTime?>("PayTime")
                        .HasColumnType("TIMESTAMP(7)");

                    b.HasKey("PayId");

                    b.HasIndex("OrderId");

                    b.ToTable("PAYMENT", (string)null);
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Order.Refund", b =>
                {
                    b.Property<string>("RefundId")
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.Property<string>("ApplicationId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("VARCHAR(450)");

                    b.Property<DateTime>("ApplyAt")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<int>("AuditStatus")
                        .HasColumnType("NUMBER(10)");

                    b.Property<DateTime?>("FinishAt")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.Property<string>("Reason")
                        .HasMaxLength(65535)
                        .HasColumnType("NCLOB");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("DECIMAL(10, 2)");

                    b.HasKey("RefundId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("OrderId");

                    b.ToTable("REFUND", (string)null);
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Order.Review", b =>
                {
                    b.Property<string>("ReviewId")
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.Property<string>("Content")
                        .HasMaxLength(65535)
                        .HasColumnType("NCLOB");

                    b.Property<int>("IsAnonymous")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.Property<int>("Rating")
                        .HasColumnType("NUMBER(10)");

                    b.Property<DateTime>("ReviewAt")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("VARCHAR(450)");

                    b.HasKey("ReviewId");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("REVIEW", (string)null);
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Reconciliation.Reconciliation", b =>
                {
                    b.Property<string>("ReconId")
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.Property<int>("AffectedOrders")
                        .HasColumnType("NUMBER(10)");

                    b.Property<decimal>("DiffAmount")
                        .HasColumnType("DECIMAL(10, 2)");

                    b.Property<DateTime>("FoundAt")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("NUMBER(1)");

                    b.Property<DateTime>("PeriodEnd")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<DateTime>("PeriodStart")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<int>("ReconType")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("ReconId");

                    b.ToTable("RECONCILIATION", (string)null);
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Rider.Assignment", b =>
                {
                    b.Property<string>("AssignId")
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.Property<DateTime?>("AcceptedAt")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<int>("AcceptedStatus")
                        .HasColumnType("NUMBER(10)");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("RiderId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("VARCHAR(450)");

                    b.Property<int?>("TimeOut")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("AssignId");

                    b.HasIndex("RiderId");

                    b.ToTable("ASSIGNMENT", (string)null);
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Rider.Attendance", b =>
                {
                    b.Property<string>("AttendanceId")
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.Property<DateTime>("CheckDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<DateTime?>("CheckInAt")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<DateTime?>("CheckoutAt")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<int>("IsAbsent")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("IsLate")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("RiderId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("VARCHAR(450)");

                    b.HasKey("AttendanceId");

                    b.HasIndex("RiderId");

                    b.ToTable("ATTENDANCE", (string)null);
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Rider.Performance", b =>
                {
                    b.Property<string>("RiderId")
                        .HasMaxLength(450)
                        .HasColumnType("VARCHAR(450)");

                    b.Property<DateTime>("StatsMonth")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<decimal>("BadReviewRate")
                        .HasColumnType("DECIMAL(5, 2)");

                    b.Property<decimal>("GoodReviewRate")
                        .HasColumnType("DECIMAL(5, 2)");

                    b.Property<decimal>("Income")
                        .HasColumnType("DECIMAL(10, 2)");

                    b.Property<decimal>("OnTimeRate")
                        .HasColumnType("DECIMAL(5, 2)");

                    b.Property<int>("TotalOrders")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("RiderId", "StatsMonth");

                    b.ToTable("PERFORMANCE", (string)null);
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Rider.Rider", b =>
                {
                    b.Property<string>("RiderId")
                        .HasMaxLength(450)
                        .HasColumnType("VARCHAR2(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)");

                    b.Property<string>("VehicleNumber")
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)");

                    b.HasKey("RiderId");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique()
                        .HasFilter("\"ApplicationUserId\" IS NOT NULL");

                    b.ToTable("RIDER", (string)null);
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Rider.RiderSchedule", b =>
                {
                    b.Property<string>("RiderId")
                        .HasMaxLength(450)
                        .HasColumnType("VARCHAR(450)");

                    b.Property<string>("ScheduleId")
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.HasKey("RiderId", "ScheduleId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("RIDER_SCHEDULE", (string)null);
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Rider.Schedule", b =>
                {
                    b.Property<string>("ScheduleId")
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.Property<DateTime>("ShiftEnd")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<DateTime>("ShiftStart")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<DateTime>("WorkDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.HasKey("ScheduleId");

                    b.ToTable("SCHEDULE", (string)null);
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Rider.ScheduleAttendance", b =>
                {
                    b.Property<string>("ScheduleId")
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.Property<string>("AttendanceId")
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.HasKey("ScheduleId", "AttendanceId");

                    b.HasIndex("AttendanceId");

                    b.ToTable("SCHEDULE_ATTENDANCE", (string)null);
                });

            modelBuilder.Entity("JISpeed.Core.Entities.User.Address", b =>
                {
                    b.Property<string>("AddressId")
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.Property<string>("DetailedAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR2(200)");

                    b.Property<int>("IsDefault")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)");

                    b.Property<string>("ReceiverPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR2(20)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("VARCHAR(450)");

                    b.HasKey("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("ADDRESS", (string)null);
                });

            modelBuilder.Entity("JISpeed.Core.Entities.User.CartItem", b =>
                {
                    b.Property<string>("CartItemId")
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("VARCHAR(450)");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("DishId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.Property<string>("MerchantId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("VARCHAR(450)");

                    b.HasKey("CartItemId", "UserId");

                    b.HasIndex("DishId");

                    b.HasIndex("MerchantId");

                    b.HasIndex("UserId");

                    b.ToTable("CARTITEM", (string)null);
                });

            modelBuilder.Entity("JISpeed.Core.Entities.User.Favorite", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("VARCHAR(450)");

                    b.Property<string>("DishId")
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.Property<DateTime>("FavorAt")
                        .HasColumnType("TIMESTAMP(7)");

                    b.HasKey("UserId", "DishId");

                    b.HasIndex("DishId");

                    b.ToTable("FAVORITE", (string)null);
                });

            modelBuilder.Entity("JISpeed.Core.Entities.User.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("VARCHAR2(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR2(200)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("DefaultAddrId")
                        .HasMaxLength(32)
                        .HasColumnType("CHAR(32)");

                    b.Property<int>("Gender")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("Level")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR2(50)");

                    b.HasKey("UserId");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique()
                        .HasFilter("\"ApplicationUserId\" IS NOT NULL");

                    b.HasIndex("DefaultAddrId");

                    b.ToTable("CUSTOMUSER", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("\"NormalizedName\" IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("APP_ROLE_CLAIMS", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("APP_USER_CLAIMS", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("APP_USER_LOGINS", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("APP_USER_ROLES", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("Name")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("Value")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("APP_USER_TOKENS", (string)null);
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Common.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<int>("RoleType")
                        .HasColumnType("NUMBER(10)");

                    b.ToTable("APP_ROLES", (string)null);
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Admin.Admin", b =>
                {
                    b.HasOne("JISpeed.Core.Entities.Common.ApplicationUser", "ApplicationUser")
                        .WithOne("AdminEntity")
                        .HasForeignKey("JISpeed.Core.Entities.Admin.Admin", "ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Admin.Announcement", b =>
                {
                    b.HasOne("JISpeed.Core.Entities.Admin.Admin", "Admin")
                        .WithMany("Announcements")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Common.Coupon", b =>
                {
                    b.HasOne("JISpeed.Core.Entities.User.User", "User")
                        .WithMany("Coupons")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Dish.Category", b =>
                {
                    b.HasOne("JISpeed.Core.Entities.Dish.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Dish.Dish", b =>
                {
                    b.HasOne("JISpeed.Core.Entities.Dish.Category", "Category")
                        .WithMany("Dishes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JISpeed.Core.Entities.Merchant.Merchant", "Merchant")
                        .WithMany("Dishes")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Junctions.DishReview", b =>
                {
                    b.HasOne("JISpeed.Core.Entities.Dish.Dish", "Dish")
                        .WithMany("DishReviews")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JISpeed.Core.Entities.Order.Review", "Review")
                        .WithMany("DishReviews")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Junctions.OrderDish", b =>
                {
                    b.HasOne("JISpeed.Core.Entities.Dish.Dish", "Dish")
                        .WithMany("OrderDishes")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JISpeed.Core.Entities.Order.Order", "Order")
                        .WithMany("OrderDishes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Merchant.Application", b =>
                {
                    b.HasOne("JISpeed.Core.Entities.Admin.Admin", "Admin")
                        .WithMany("Applications")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("JISpeed.Core.Entities.Merchant.Merchant", "Merchant")
                        .WithMany("Applications")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Merchant.Merchant", b =>
                {
                    b.HasOne("JISpeed.Core.Entities.Common.ApplicationUser", "ApplicationUser")
                        .WithOne("MerchantEntity")
                        .HasForeignKey("JISpeed.Core.Entities.Merchant.Merchant", "ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Merchant.SalesStat", b =>
                {
                    b.HasOne("JISpeed.Core.Entities.Merchant.Merchant", "Merchant")
                        .WithMany("SalesStats")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Merchant.Settlement", b =>
                {
                    b.HasOne("JISpeed.Core.Entities.Merchant.Merchant", "Merchant")
                        .WithMany("Settlements")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Order.Complaint", b =>
                {
                    b.HasOne("JISpeed.Core.Entities.User.User", "Complainant")
                        .WithMany("Complaints")
                        .HasForeignKey("ComplainantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JISpeed.Core.Entities.Order.Order", "Order")
                        .WithMany("Complaints")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Complainant");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Order.Order", b =>
                {
                    b.HasOne("JISpeed.Core.Entities.User.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JISpeed.Core.Entities.Rider.Assignment", "Assignment")
                        .WithOne("Order")
                        .HasForeignKey("JISpeed.Core.Entities.Order.Order", "AssignId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("JISpeed.Core.Entities.Common.Coupon", "Coupon")
                        .WithMany("Orders")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("JISpeed.Core.Entities.Reconciliation.Reconciliation", "Reconciliation")
                        .WithMany("Orders")
                        .HasForeignKey("ReconId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("JISpeed.Core.Entities.User.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Assignment");

                    b.Navigation("Coupon");

                    b.Navigation("Reconciliation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Order.OrderLog", b =>
                {
                    b.HasOne("JISpeed.Core.Entities.Order.Order", "Order")
                        .WithMany("OrderLogs")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Order.Payment", b =>
                {
                    b.HasOne("JISpeed.Core.Entities.Order.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Order.Refund", b =>
                {
                    b.HasOne("JISpeed.Core.Entities.User.User", "Applicant")
                        .WithMany("Refunds")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JISpeed.Core.Entities.Order.Order", "Order")
                        .WithMany("Refunds")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Order.Review", b =>
                {
                    b.HasOne("JISpeed.Core.Entities.Order.Order", "Order")
                        .WithMany("Reviews")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JISpeed.Core.Entities.User.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Rider.Assignment", b =>
                {
                    b.HasOne("JISpeed.Core.Entities.Rider.Rider", "Rider")
                        .WithMany("Assignments")
                        .HasForeignKey("RiderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Rider");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Rider.Attendance", b =>
                {
                    b.HasOne("JISpeed.Core.Entities.Rider.Rider", "Rider")
                        .WithMany("Attendances")
                        .HasForeignKey("RiderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rider");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Rider.Performance", b =>
                {
                    b.HasOne("JISpeed.Core.Entities.Rider.Rider", "Rider")
                        .WithMany("Performances")
                        .HasForeignKey("RiderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rider");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Rider.Rider", b =>
                {
                    b.HasOne("JISpeed.Core.Entities.Common.ApplicationUser", "ApplicationUser")
                        .WithOne("RiderEntity")
                        .HasForeignKey("JISpeed.Core.Entities.Rider.Rider", "ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Rider.RiderSchedule", b =>
                {
                    b.HasOne("JISpeed.Core.Entities.Rider.Rider", "Rider")
                        .WithMany("RiderSchedules")
                        .HasForeignKey("RiderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JISpeed.Core.Entities.Rider.Schedule", "Schedule")
                        .WithMany("RiderSchedules")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rider");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Rider.ScheduleAttendance", b =>
                {
                    b.HasOne("JISpeed.Core.Entities.Rider.Attendance", "Attendance")
                        .WithMany("ScheduleAttendances")
                        .HasForeignKey("AttendanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JISpeed.Core.Entities.Rider.Schedule", "Schedule")
                        .WithMany("ScheduleAttendances")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attendance");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.User.Address", b =>
                {
                    b.HasOne("JISpeed.Core.Entities.User.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.User.CartItem", b =>
                {
                    b.HasOne("JISpeed.Core.Entities.Dish.Dish", "Dish")
                        .WithMany("CartItems")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JISpeed.Core.Entities.Merchant.Merchant", "Merchant")
                        .WithMany()
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JISpeed.Core.Entities.User.User", "User")
                        .WithMany("CartItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Merchant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.User.Favorite", b =>
                {
                    b.HasOne("JISpeed.Core.Entities.Dish.Dish", "Dish")
                        .WithMany("Favorites")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JISpeed.Core.Entities.User.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.User.User", b =>
                {
                    b.HasOne("JISpeed.Core.Entities.Common.ApplicationUser", "ApplicationUser")
                        .WithOne("UserEntity")
                        .HasForeignKey("JISpeed.Core.Entities.User.User", "ApplicationUserId");

                    b.HasOne("JISpeed.Core.Entities.User.Address", "DefaultAddress")
                        .WithMany()
                        .HasForeignKey("DefaultAddrId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ApplicationUser");

                    b.Navigation("DefaultAddress");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("JISpeed.Core.Entities.Common.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("JISpeed.Core.Entities.Common.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JISpeed.Core.Entities.Common.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("JISpeed.Core.Entities.Common.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Common.ApplicationRole", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithOne()
                        .HasForeignKey("JISpeed.Core.Entities.Common.ApplicationRole", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Admin.Admin", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("Applications");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Common.ApplicationUser", b =>
                {
                    b.Navigation("AdminEntity");

                    b.Navigation("MerchantEntity");

                    b.Navigation("RiderEntity");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Common.Coupon", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Dish.Category", b =>
                {
                    b.Navigation("Dishes");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Dish.Dish", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("DishReviews");

                    b.Navigation("Favorites");

                    b.Navigation("OrderDishes");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Merchant.Merchant", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Dishes");

                    b.Navigation("SalesStats");

                    b.Navigation("Settlements");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Order.Order", b =>
                {
                    b.Navigation("Complaints");

                    b.Navigation("OrderDishes");

                    b.Navigation("OrderLogs");

                    b.Navigation("Payments");

                    b.Navigation("Refunds");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Order.Review", b =>
                {
                    b.Navigation("DishReviews");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Reconciliation.Reconciliation", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Rider.Assignment", b =>
                {
                    b.Navigation("Order")
                        .IsRequired();
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Rider.Attendance", b =>
                {
                    b.Navigation("ScheduleAttendances");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Rider.Rider", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Attendances");

                    b.Navigation("Performances");

                    b.Navigation("RiderSchedules");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.Rider.Schedule", b =>
                {
                    b.Navigation("RiderSchedules");

                    b.Navigation("ScheduleAttendances");
                });

            modelBuilder.Entity("JISpeed.Core.Entities.User.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("CartItems");

                    b.Navigation("Complaints");

                    b.Navigation("Coupons");

                    b.Navigation("Favorites");

                    b.Navigation("Orders");

                    b.Navigation("Refunds");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
